package wiki;


import java.util.Arrays;

public class Math {
	static String formatList[] = {"operatorname","mathrm","boldsymbol","mathbb","mathbf","mathit","mbox","mathfrak","mathcal"};
	
	
	public static String correctFormula(String line){
		if(line.contains("<math") || line.contains("</math>")) {
//			System.out.println(line);
//			String strs[] = line.split(" ?\\\\");
			//System.out.println(Arrays.toString(strs));
			
			//space
			line=line.replaceAll(" ?\\\\! ?","");
			line=line.replaceAll(" ?\\\\, ?","");
			line=line.replaceAll(" ?\\\\> ?","");
			line=line.replaceAll(" ?\\\\; ?","");
			line=line.replaceAll(" ?\\\\  ?"," ");
			line=line.replaceAll(" ?\\\\qq?uad  ?"," ");
			
			//Accents/diacritics
			line=line.replaceAll(" ?\\\\acute ?","");
			line=line.replaceAll(" ?\\\\grave ?","");
			line=line.replaceAll(" ?\\\\hat ?","");
			line=line.replaceAll(" ?\\\\widehat ?","");
			line=line.replaceAll(" ?\\\\vec ?","");
			line=line.replaceAll(" ?\\\\tilde ?","");
			line=line.replaceAll(" ?\\\\breve ?","");
			line=line.replaceAll(" ?\\\\check ?","");
			line=line.replaceAll(" ?\\\\bar ?","");		
			line=line.replaceAll(" ?\\\\ddot ?","");
			line=line.replaceAll(" ?\\\\acute ?","");
			line=line.replaceAll(" ?\\\\dot ?","");
			
			//Standard numerical functions
			line=line.replaceAll(" ?\\\\sin ?","sin");
			line=line.replaceAll(" ?\\\\cos ?","cos");
			line=line.replaceAll(" ?\\\\tan ?","tan");
			line=line.replaceAll(" ?\\\\sec ?","sec");
			line=line.replaceAll(" ?\\\\csc ?","csc");
			line=line.replaceAll(" ?\\\\cot ?","cot");
			line=line.replaceAll(" ?\\\\arcsin ?","arcsin");
			line=line.replaceAll(" ?\\\\arccos ?","arccos");
			line=line.replaceAll(" ?\\\\arctan ?","arctan");
			line=line.replaceAll(" ?\\\\sinh ?","sinh");
			line=line.replaceAll(" ?\\\\cosh ?","cosh");
			line=line.replaceAll(" ?\\\\tanh ?","tanh");
			line=line.replaceAll(" ?\\\\coth ?","coth");
			line=line.replaceAll(" ?\\\\arcsin ?","arcsin");
			line=line.replaceAll(" ?\\\\arcsin ?","arcsin");
			line=line.replaceAll(" ?\\\\arcsin ?","arcsin");
			line=line.replaceAll(" ?\\\\lim ?","lim");
			line=line.replaceAll(" ?\\\\limsup ?","limsup");
			line=line.replaceAll(" ?\\\\liminf ?","liminf");
			line=line.replaceAll(" ?\\\\min ?","min");
			line=line.replaceAll(" ?\\\\max ?","max");
			line=line.replaceAll(" ?\\\\inf ?","inf");
			line=line.replaceAll(" ?\\\\sup ?","sup");
			line=line.replaceAll(" ?\\\\exp ?","exp");
			line=line.replaceAll(" ?\\\\ln ?","ln");
			line=line.replaceAll(" ?\\\\lg ?","lg");
			line=line.replaceAll(" ?\\\\log ?","log");
			line=line.replaceAll(" ?\\\\ker ?","ker");
			line=line.replaceAll(" ?\\\\deg ?","deg");
			line=line.replaceAll(" ?\\\\gcd ?","gcd");
			line=line.replaceAll(" ?\\\\Pr ?","Pr");
			line=line.replaceAll(" ?\\\\det ?","det");
			line=line.replaceAll(" ?\\\\hom ?","hom");
			line=line.replaceAll(" ?\\\\arg ?","arg");
			line=line.replaceAll(" ?\\\\dim ?","dim");
			
			//Modular arithmetic
			line=line.replaceAll(" ?\\\\equiv ?","‚â°");
			line=line.replaceAll(" ?\\\\pmod ?","mod");
			line=line.replaceAll(" ?\\\\, ?\\\\bmod ?\\\\, ?"," mod");
			
			//Arrows
			line=line.replaceAll(" ?\\\\leftarrow ?","‚Üê");
			line=line.replaceAll(" ?\\\\gets ?","‚Üê");
			line=line.replaceAll(" ?\\\\rightarrow ?","‚Üí");
			line=line.replaceAll(" ?\\\\to ?","‚Üí");
			line=line.replaceAll(" ?\\\\nleftarrow ?","‚á∑");
			line=line.replaceAll(" ?\\\\nrightarrow ?","‚á∏");
			line=line.replaceAll(" ?\\\\leftrightarrow ?","‚Üî");
			line=line.replaceAll(" ?\\\\longleftarrow ?","‚Üê");
			line=line.replaceAll(" ?\\\\longrightarrow ?","‚Üí");
			line=line.replaceAll(" ?\\\\longleftrightarrow ?","‚Üî");
			
			line=line.replaceAll(" ?\\\\Leftarrow ?","‚áê");
			line=line.replaceAll(" ?\\\\Rightarrow ?","‚áí");
			line=line.replaceAll(" ?\\\\nLeftarrow ?","‚áç");
			line=line.replaceAll(" ?\\\\nRightarrow ?","‚áè");
			line=line.replaceAll(" ?\\\\Leftrightarrow ?","‚áî");
			line=line.replaceAll(" ?\\\\nLeftrightarrow ?","‚áé");
			line=line.replaceAll(" ?\\\\Longleftarrow ?","‚ü∏");
			line=line.replaceAll(" ?\\\\Longrightarrow ?","‚üπ");
			line=line.replaceAll(" ?\\\\Longleftrightarrow ?","‚ü∫");
			line=line.replaceAll(" ?\\\\iff ?","‚ü∫");
			
			line=line.replaceAll(" ?\\\\uparrow ?","‚Üë");
			line=line.replaceAll(" ?\\\\downarrow ?","‚Üì");
			line=line.replaceAll(" ?\\\\updownarrow ?","‚Üï");
			
			line=line.replaceAll(" ?\\\\nwarrow ?","‚Üñ");
			line=line.replaceAll(" ?\\\\nearrow ?","‚Üó");
			line=line.replaceAll(" ?\\\\searrow ?","‚Üò");
			line=line.replaceAll(" ?\\\\searrow ?","‚Üô");
			line=line.replaceAll(" ?\\\\swarrow ?","‚áë");
			line=line.replaceAll(" ?\\\\Downarrow ?","‚áì");
			line=line.replaceAll(" ?\\\\Updownarrow ?","‚áï");
			
			//Greek
			line=line.replaceAll(" ?\\\\Alpha ?" ,"Œë");
			line=line.replaceAll(" ?\\\\Beta ?" ,"Œí");
			line=line.replaceAll(" ?\\\\Gamma ?" ,"Œì");
			line=line.replaceAll(" ?\\\\Delta ?" ,"Œî");
			line=line.replaceAll(" ?\\\\Epsilon ?" ,"Œï");
			line=line.replaceAll(" ?\\\\Zeta ?" ,"Œñ");
			line=line.replaceAll(" ?\\\\Eta ?" ,"Œó");
			line=line.replaceAll(" ?\\\\Theta ?" ,"Œò");
			line=line.replaceAll(" ?\\\\Iota ?" ,"Œô");
			line=line.replaceAll(" ?\\\\Kappa ?" ,"Œö");
			line=line.replaceAll(" ?\\\\Lambda ?" ,"Œõ");
			line=line.replaceAll(" ?\\\\Mu ?" ,"Œú");
			line=line.replaceAll(" ?\\\\Nu ?" ,"Œù");
			line=line.replaceAll(" ?\\\\Xi ?" ,"Œû");
			line=line.replaceAll(" ?\\\\Omicron ?" ,"Œü");
			line=line.replaceAll(" ?\\\\Pi ?" ,"Œ†");
			line=line.replaceAll(" ?\\\\Rho ?" ,"Œ°");
			line=line.replaceAll(" ?\\\\Sigma ?" ,"Œ£");
			line=line.replaceAll(" ?\\\\Tau ?" ,"Œ§");
			line=line.replaceAll(" ?\\\\Upsilon ?" ,"Œ•");
			line=line.replaceAll(" ?\\\\Phi ?" ,"Œ¶");
			line=line.replaceAll(" ?\\\\Chi ?" ,"Œß");
			line=line.replaceAll(" ?\\\\Psi ?" ,"Œ®");
			line=line.replaceAll(" ?\\\\Omega ?" ,"Œ©");
			line=line.replaceAll(" ?\\\\alpha ?" ,"Œ±");
			line=line.replaceAll(" ?\\\\beta ?" ,"Œ≤");
			line=line.replaceAll(" ?\\\\gamma ?" ,"Œ≥");
			line=line.replaceAll(" ?\\\\delta ?" ,"Œ¥");
			line=line.replaceAll(" ?\\\\epsilon ?" ,"œµ");
			line=line.replaceAll(" ?\\\\zeta ?" ,"Œ∂");
			line=line.replaceAll(" ?\\\\eta ?" ,"Œ∑");
			line=line.replaceAll(" ?\\\\theta ?" ,"Œ∏");
			line=line.replaceAll(" ?\\\\iota ?" ,"Œπ");
			line=line.replaceAll(" ?\\\\kappa ?" ,"Œ∫");
			line=line.replaceAll(" ?\\\\lambda ?" ,"Œª");
			line=line.replaceAll(" ?\\\\mu ?" ,"Œº");
			line=line.replaceAll(" ?\\\\nu ?" ,"ŒΩ");
			line=line.replaceAll(" ?\\\\xi ?" ,"Œæ");
			line=line.replaceAll(" ?\\\\omicron ?" ,"Œø");
			line=line.replaceAll(" ?\\\\pi ?" ,"œÄ");
			line=line.replaceAll(" ?\\\\rho ?" ,"œÅ");
			line=line.replaceAll(" ?\\\\sigma ?" ,"œÉ");
			line=line.replaceAll(" ?\\\\tau ?" ,"œÑ");
			line=line.replaceAll(" ?\\\\upsilon ?" ,"œÖ");
			line=line.replaceAll(" ?\\\\phi ?" ,"œï");
			line=line.replaceAll(" ?\\\\chi ?" ,"œá");
			line=line.replaceAll(" ?\\\\psi ?" ,"œà");
			line=line.replaceAll(" ?\\\\omega ?" ,"œâ");
			line=line.replaceAll(" ?\\\\varepsilon ?" ,"Œµ");
			line=line.replaceAll(" ?\\\\digamma ?" ,"œú");
			line=line.replaceAll(" ?\\\\varkappa ?" ,"œ∞");
			line=line.replaceAll(" ?\\\\varpi ?" ,"œñ");
			line=line.replaceAll(" ?\\\\varrho ?" ,"œ±");
			line=line.replaceAll(" ?\\\\varsigma ?" ,"œÇ");
			line=line.replaceAll(" ?\\\\vartheta ?" ,"œë");
			line=line.replaceAll(" ?\\\\varphi ?" ,"œÜ");

			//Differentials and derivatives
			line=line.replaceAll(" ?\\\\nabla" ,"‚àá");
			line=line.replaceAll(" ?\\\\partial" ,"‚àÇ");
//			line=line.replaceAll("\\{d\\}" ,"ùëë");
			
			//Geometric
			line=line.replaceAll(" ?\\\\angle ?","‚à†");
			line=line.replaceAll(" ?\\\\Diamond ?","‚ãÑ");	
			line=line.replaceAll(" ?\\\\Box ?","‚ñ°");
			line=line.replaceAll(" ?\\\\triangle ?","‚ñ≥");
			line=line.replaceAll(" ?\\\\prep ?","‚üÇ");
			line=line.replaceAll(" ?\\\\mid ?","‚ùò");
			line=line.replaceAll(" ?\\\\nmid ?","‚üä");
			
			//Letter-like symbols or constants
			line=line.replaceAll(" ?\\\\infty ?","‚àû");
			line=line.replaceAll(" ?\\\\aleph ?","◊ê");
			line=line.replaceAll(" ?\\\\complement ?","‚àÅ");
			line=line.replaceAll(" ?\\\\backepsilon ?","œ∂");
			line=line.replaceAll(" ?\\\\eth ?","√∞");
			line=line.replaceAll(" ?\\\\hbar ?","ƒß");
			line=line.replaceAll(" ?\\\\imath ?","i");
			line=line.replaceAll(" ?\\\\jmath ?","j");
			line=line.replaceAll(" ?\\\\Bbbk ?","ùïú");
			line=line.replaceAll(" ?\\\\ell ?","l");
			
			
			
			//format
			line=line.replaceAll(" ?\\\\operatorname ?","");
			line=line.replaceAll(" ?\\\\mathrm ?","");
			line=line.replaceAll(" ?\\\\boldsymbol ?","");
			line=line.replaceAll(" ?\\\\mathbb ?","");
			line=line.replaceAll(" ?\\\\mathbf ?","");
			line=line.replaceAll(" ?\\\\mathsf ?","");
			line=line.replaceAll(" ?\\\\mathit ?","");
			line=line.replaceAll(" ?\\\\mbox ?","");
			line=line.replaceAll(" ?\\\\mathfrak ?","");
			line=line.replaceAll(" ?\\\\mathcal ?","");
			line=line.replaceAll(" ?\\\\quad ?","");
			
			
			line=line.replaceAll(" ?\\\\scriptstyle ?","");
			line=line.replaceAll(" ?\\\\rm ?","");
			
			//Punctuation
			line=line.replaceAll(" ?\\\\left ?","");
			line=line.replaceAll(" ?\\\\right ?","");
			line=line.replaceAll(" ?\\\\langle ?","‚Äπ");
			line=line.replaceAll(" ?\\\\rangle ?","‚Ä∫");
			line=line.replaceAll(" ?\\\\vert ?","|");
			line=line.replaceAll(" ?\\\\Vert ?","‚Äñ");
			
			//Operators
			line=line.replaceAll(" ?\\\\oplus ?","‚äï");
			line=line.replaceAll(" ?\\\\bigoplus" ,"‚®Å");
			line=line.replaceAll(" ?\\\\pm ?","¬±");
			line=line.replaceAll(" ?\\\\mp ?","‚àì");
			line=line.replaceAll(" ?\\\\times ?","√ó");
			line=line.replaceAll(" ?\\\\otimes ?","‚äó");
			line=line.replaceAll(" ?\\\\bigotimes ?","‚®Ç");
			line=line.replaceAll(" ?\\\\cdot ?","‚àô");
			line=line.replaceAll(" ?\\\\circ ?","‚àò");
			line=line.replaceAll(" ?\\\\bullet ?","‚àô");
			line=line.replaceAll(" ?\\\\bigodot ?","‚äô");
			line=line.replaceAll(" ?\\\\star ?","‚ãÜ");
			line=line.replaceAll(" ?\\\\div ?","√∑");
			line=line.replaceAll(" ?\\\\int ?","‚à´");
			
			//Logic
			line=line.replaceAll(" ?\\\\land ?","‚ãÄ");
			line=line.replaceAll(" ?\\\\and ?","‚ãÄ");
			line=line.replaceAll(" ?\\\\wedge ?","‚ãÄ");
			line=line.replaceAll(" ?\\\\lor ?","‚ãÄ");
			line=line.replaceAll(" ?\\\\vee ?","‚ãÅ");
			line=line.replaceAll(" ?\\\\bigvee ?","‚ãÅ");
			line=line.replaceAll(" ?\\\\lnot ?","¬¨");
			line=line.replaceAll(" ?\\\\neg ?","¬¨");
			line=line.replaceAll(" ?\\\\And ?","&");
			
			//Relations
			line=line.replaceAll(" ?\\\\ne ?","‚â†");
			line=line.replaceAll(" ?\\\\stackrel\\{def\\}\\{=\\} ?","=");
			line=line.replaceAll(" ?\\\\sim ?","‚àº");
			line=line.replaceAll(" ?\\\\approx ?","‚âà");
			line=line.replaceAll(" ?\\\\simeq ?","‚âÉ");
			line=line.replaceAll(" ?\\\\cong ?","‚âÖ");
			line=line.replaceAll(" ?\\\\dot= ?","‚âê");
			line=line.replaceAll(" ?\\\\le ?","‚â§");
			line=line.replaceAll(" ?\\\\ge ?","‚â•");
			line=line.replaceAll(" ?\\\\ll ?","‚â™");
			line=line.replaceAll(" ?\\\\gg ?","‚â´");
			
			//Sets
			line=line.replaceAll(" ?\\\\\\{ ?","\\{");
			line=line.replaceAll(" ?\\\\\\} ?","\\}");
			line=line.replaceAll(" ?\\\\forall ?","‚àÄ");
			line=line.replaceAll(" ?\\\\exists ?","‚àÉ");
			line=line.replaceAll(" ?\\\\empty ?","‚àÖ");
			line=line.replaceAll(" ?\\\\emptyset ?","‚àÖ");
			line=line.replaceAll(" ?\\\\varnothing ?","‚àÖ");
			line=line.replaceAll(" ?\\\\in ?","‚àà");
			line=line.replaceAll(" ?\\\\ni ?","‚àã");
			line=line.replaceAll(" ?\\\\not  ?","‚àâ");
			line=line.replaceAll(" ?\\\\notin ?","‚àâ");
			line=line.replaceAll(" ?\\\\subset ?","‚äÇ");
			line=line.replaceAll(" ?\\\\subseteq ?","‚äÜ");
			line=line.replaceAll(" ?\\\\supset ?","‚äÉ");
			line=line.replaceAll(" ?\\\\supseteq ?","‚äá");
			line=line.replaceAll(" ?\\\\cap ?","‚ãÇ");
			line=line.replaceAll(" ?\\\\bigcap ?","‚ãÇ");
			line=line.replaceAll(" ?\\\\cup ?","‚ãÉ");
			line=line.replaceAll(" ?\\\\bigcup ?","‚ãÉ");
			line=line.replaceAll(" ?\\\\biguplus ?","‚®Ñ");
			line=line.replaceAll(" ?\\\\setminus ?"," ?\\\\");
			line=line.replaceAll(" ?\\\\smallsetminus ?","‚àñ");
			line=line.replaceAll(" ?\\\\sqsubset ?","‚äè");
			line=line.replaceAll(" ?\\\\sqsubseteq ?","‚äë");
			line=line.replaceAll(" ?\\\\sqsupset ?","‚äê");
			line=line.replaceAll(" ?\\\\sqsupseteq ?","‚äí");
			line=line.replaceAll(" ?\\\\sqcap ?","‚äì");
			line=line.replaceAll(" ?\\\\sqcup ?","‚äî");
			line=line.replaceAll(" ?\\\\bigsqcup ?","‚äî");

			
			line=line.replaceAll(" ?\\\\over ?","/");

			line=line.replaceAll(" ?\\\\l?v?dots ?","‚Ä¶");
			
			line=line.replaceAll(" ?\\\\begin ?","");
			line=line.replaceAll(" ?\\\\end ?","");

			for(String format: formatList){
				long startTime=System.nanoTime();
				
				while(line.matches(".*\\\\"+format+"\\{.*\\}.*")){
//					System.out.println(format);
//					System.out.println(line);
					int beginIndexA = line.indexOf(format+"{");
					int endIndexA = line.indexOf("}",beginIndexA);
					
					String A = line.substring(beginIndexA+(format+"{").length(), endIndexA);
					while (Operation.countSubstr(A, "\\{") != Operation.countSubstr(A, "\\}")){				
						endIndexA = line.indexOf("}",endIndexA+1);
						A = line.substring(beginIndexA+(format+"{").length(), endIndexA);
					}
//					System.out.println(A);
//					System.out.println(B);
					line=line.replace("\\"+format+"{"+A+"}",A);
					
					double sDuration = (System.nanoTime() - startTime)/1000000000;
					if(sDuration>3){
						System.out.println(line);
						break;
					}
				}
			}
			
			long startTime=System.nanoTime();
			while(line.matches(".*\\^\\{.*\\}.*")){
				String A = "";
				System.out.println(line);
				int beginIndexA = line.indexOf("^{");
				int endIndexA = line.indexOf("}",beginIndexA);
				A = line.substring(beginIndexA+("^{").length(), endIndexA);
				//System.out.println(Operation.countSubstr(A, "\\{|\\}")%2);
				while (Operation.countSubstr(A, "\\{") != Operation.countSubstr(A, "\\}")){				
					endIndexA = line.indexOf("}",endIndexA+1);
					A = line.substring(beginIndexA+("^{").length(), endIndexA);
				}
				//System.out.println(A);
				
				line=line.replace("^{"+A+"}","^("+A+")");
				double sDuration = (System.nanoTime() - startTime)/1000000000;
				if(sDuration>300){
					System.out.println(line);
					break;
				}
			}
			
			startTime=System.nanoTime();
			while(line.matches(".*\\\\[dct]?frac\\{.*\\}\\{.*\\}.*")){
				int beginIndexA = line.indexOf("frac{");
				int endIndexA = line.indexOf("}",beginIndexA);
				String A = line.substring(beginIndexA+"frac{".length(), endIndexA);
				while (Operation.countSubstr(A, "\\{") != Operation.countSubstr(A, "\\}")){				
					endIndexA = line.indexOf("}",endIndexA+1);
					A = line.substring(beginIndexA+("frac{").length(), endIndexA);
				}
//				System.out.println(A);
				int beginIndexB = line.indexOf("{",endIndexA);
				int endIndexB = line.indexOf("}",beginIndexB);
				String B = line.substring(beginIndexB+"{".length(), endIndexB);
				while (Operation.countSubstr(B, "\\{") != Operation.countSubstr(B, "\\}")){				
					endIndexB = line.indexOf("}",endIndexB+1);
					B = line.substring(beginIndexB+("{").length(), endIndexB);
				}
//				System.out.println(B);
				String A2 = A;
				String B2 = B;
				if(A.contains("+") || A.contains("-")) A2="("+A+")";
				if(B.contains("+") || B.contains("-")) B2="("+B+")";
				line=line.replace("\\tfrac{"+A+"}{"+B+"}",A2+"/"+B2);
				line=line.replace("\\cfrac{"+A+"}{"+B+"}",A2+"/"+B2);
				line=line.replace("\\dfrac{"+A+"}{"+B+"}",A2+"/"+B2);
				line=line.replace("\\frac{"+A+"}{"+B+"}",A2+"/"+B2);
				double sDuration = (System.nanoTime() - startTime)/1000000000;
				if(sDuration>3){
					System.out.println(line);
					break;
				}
			}
			
			startTime=System.nanoTime();
			while(line.matches(".*\\\\sqrt(\\[.*\\])?\\{.*\\}.*")){
				int beginIndexA=0;
				int endIndexA=0;
				int beginIndexB=0;
				int endIndexB=0;
				String A = "";
				String B = "";
				if(line.contains("sqrt{")){
					beginIndexA = line.indexOf("sqrt{");
					endIndexA = line.indexOf("}",beginIndexA);
					A = line.substring(beginIndexA+"sqrt{".length(), endIndexA);
					while (Operation.countSubstr(A, "\\{") != Operation.countSubstr(A, "\\}")){				
						endIndexA = line.indexOf("}",endIndexA+1);
						A = line.substring(beginIndexA+("sqrt{").length(), endIndexA);
					}
//					System.out.println(A);
					line=line.replace("\\sqrt{"+A+"}","‚àö("+A+")");
				}
				else if(line.contains("sqrt[")){
					beginIndexA = line.indexOf("sqrt[");
					endIndexA = line.indexOf("]",beginIndexA);
					A = line.substring(beginIndexA+"sqrt[".length(), endIndexA);
					while (Operation.countSubstr(A, "\\[") != Operation.countSubstr(A, "\\]")){				
						endIndexA = line.indexOf("]",endIndexA+1);
						A = line.substring(beginIndexA+("sqrt[").length(), endIndexA);
					}
					beginIndexB = line.indexOf("]{",endIndexA);
					endIndexB = line.indexOf("}",beginIndexB);
					B = line.substring(beginIndexB+"]{".length(), endIndexB);
					while (Operation.countSubstr(B, "\\{") != Operation.countSubstr(B, "\\}")){				
						endIndexB = line.indexOf("}",endIndexB+1);
						B = line.substring(beginIndexB+("]{").length(), endIndexB);
					}
//					System.out.println(A);
//					System.out.println(B);
//					if(A.equals("3"))line=line.replace("\\sqrt["+A+"]{"+B+"}","‚àõ("+B+")");
//					else if(A.equals("4"))line=line.replace("\\sqrt["+A+"]{"+B+"}","‚àú("+B+")");
					line=line.replace("\\sqrt["+A+"]{"+B+"}","‚àö["+A+"]("+B+")");
				}
				
				double sDuration = (System.nanoTime() - startTime)/1000000000;
				if(sDuration>3){
					System.out.println(line);
					break;
				}
			}
			
			startTime=System.nanoTime();
			while(line.matches(".*\\^\\{.*\\}.*")){
				String A = "";
				System.out.println(line);
				int beginIndexA = line.indexOf("^{");
				int endIndexA = line.indexOf("}",beginIndexA);
				A = line.substring(beginIndexA+("^{").length(), endIndexA);
				//System.out.println(Operation.countSubstr(A, "\\{|\\}")%2);
				while (Operation.countSubstr(A, "\\{") != Operation.countSubstr(A, "\\}")){				
					endIndexA = line.indexOf("}",endIndexA+1);
					A = line.substring(beginIndexA+("^{").length(), endIndexA);
				}
				//System.out.println(A);
				
				line=line.replace("^{"+A+"}","^("+A+")");
				double sDuration = (System.nanoTime() - startTime)/1000000000;
				if(sDuration>3){
					System.out.println(line);
					break;
				}
			}
			
			line=line.replaceAll("< ?/? ?math ?>","");
			line = line.replaceAll("\\s+", " ");
			
//			line.replaceAll("\\\\ ?","");
			
//			System.out.println(line+"\n");
			
			
			
		}
		
		
		return line;
		
	}
}
